name: Deploy Identity Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/backend/lambdas/identity/**'
      - 'infra/lambda-identity.tf'
      - 'infra/cognito.tf'
      - 'infra/api-gateway.tf'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/backend/lambdas/identity/**'
      - 'infra/lambda-identity.tf'
      - 'infra/cognito.tf'
      - 'infra/api-gateway.tf'

env:
  AWS_REGION: us-east-1
  RUST_VERSION: 1.75.0

jobs:
  build:
    runs-on: ubuntu-latest

    environment:
      name: AWS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: aarch64-unknown-linux-gnu

    - name: Install cargo-lambda
      run: |
        pip install cargo-lambda

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          apps/backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build Lambda
      run: |
        cd apps/backend
        cargo lambda build --release --arm64 --output-format zip
        
    - name: Create build directory
      run: |
        mkdir -p build
        cp apps/backend/target/lambda/register-user/bootstrap.zip build/register-user.zip
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lambda-artifacts
        path: build/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: AWS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambda-artifacts
        path: build/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: |
        cd infra
        terraform init

    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -var="aws_region=${{ env.AWS_REGION }}"

    - name: Terraform Apply
      run: |
        cd infra
        terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}"

    - name: Output API Gateway URL
      run: |
        cd infra
        echo "API Gateway URL: $(terraform output -raw api_gateway_url)"
        echo "Register endpoint: $(terraform output -raw api_gateway_url)/auth/register"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: AWS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Get API Gateway URL
      id: get_url
      run: |
        cd infra
        terraform init
        API_URL=$(terraform output -raw api_gateway_url)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Test Register Endpoint
      run: |
        API_URL="${{ steps.get_url.outputs.api_url }}"
        
        echo "Testing user registration endpoint..."
        
        # Test with valid data
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "$API_URL/auth/register" \
          -H "Content-Type: application/json" \
          -d '{
            "email": "test-'$(date +%s)'@example.com",
            "password": "TestPassword123",
            "tenant_id": "test-tenant",
            "user_role": "User"
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "HTTP Status: $HTTP_CODE"
        echo "Response: $BODY"
        
        if [ "$HTTP_CODE" -eq 201 ]; then
          echo "✅ Registration test passed"
        else
          echo "❌ Registration test failed"
          exit 1
        fi

        # Test with invalid data
        echo "Testing validation..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "$API_URL/auth/register" \
          -H "Content-Type: application/json" \
          -d '{
            "email": "invalid-email",
            "password": "short",
            "tenant_id": ""
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        
        if [ "$HTTP_CODE" -eq 400 ]; then
          echo "✅ Validation test passed"
        else
          echo "❌ Validation test failed"
          exit 1
        fi 